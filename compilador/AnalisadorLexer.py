# Generated from T1_CC/compilador/AnalisadorLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,254,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,165,8,0,1,1,3,1,168,8,1,1,1,4,
        1,171,8,1,11,1,12,1,172,1,1,1,1,4,1,177,8,1,11,1,12,1,178,3,1,181,
        8,1,1,2,3,2,184,8,2,1,2,4,2,187,8,2,11,2,12,2,188,1,3,1,3,5,3,193,
        8,3,10,3,12,3,196,9,3,1,4,1,4,1,4,5,4,201,8,4,10,4,12,4,204,9,4,
        1,4,1,4,1,5,1,5,1,5,1,6,1,6,5,6,213,8,6,10,6,12,6,216,9,6,1,6,3,
        6,219,8,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,5,8,231,8,8,10,
        8,12,8,234,9,8,1,8,3,8,237,8,8,1,8,1,8,1,9,1,9,5,9,243,8,9,10,9,
        12,9,246,9,9,1,9,3,9,249,8,9,1,9,1,9,1,10,1,10,0,0,11,1,1,3,2,5,
        3,7,4,9,5,11,0,13,6,15,7,17,8,19,9,21,10,1,0,11,3,0,42,43,45,45,
        47,47,3,0,37,37,60,60,62,62,3,0,46,46,91,91,93,94,2,0,43,43,45,45,
        3,0,65,90,95,95,97,122,3,0,48,57,65,90,97,122,2,0,34,34,92,92,2,
        0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,34,34,1,0,125,125,297,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,164,1,
        0,0,0,3,167,1,0,0,0,5,183,1,0,0,0,7,190,1,0,0,0,9,197,1,0,0,0,11,
        207,1,0,0,0,13,210,1,0,0,0,15,224,1,0,0,0,17,228,1,0,0,0,19,240,
        1,0,0,0,21,252,1,0,0,0,23,24,5,97,0,0,24,25,5,108,0,0,25,26,5,103,
        0,0,26,27,5,111,0,0,27,28,5,114,0,0,28,29,5,105,0,0,29,30,5,116,
        0,0,30,31,5,109,0,0,31,165,5,111,0,0,32,33,5,100,0,0,33,34,5,101,
        0,0,34,35,5,99,0,0,35,36,5,108,0,0,36,37,5,97,0,0,37,38,5,114,0,
        0,38,165,5,101,0,0,39,165,5,58,0,0,40,41,5,108,0,0,41,42,5,105,0,
        0,42,43,5,116,0,0,43,44,5,101,0,0,44,45,5,114,0,0,45,46,5,97,0,0,
        46,165,5,108,0,0,47,48,5,105,0,0,48,49,5,110,0,0,49,50,5,116,0,0,
        50,51,5,101,0,0,51,52,5,105,0,0,52,53,5,114,0,0,53,165,5,111,0,0,
        54,55,5,108,0,0,55,56,5,101,0,0,56,57,5,105,0,0,57,165,5,97,0,0,
        58,59,5,101,0,0,59,60,5,115,0,0,60,61,5,99,0,0,61,62,5,114,0,0,62,
        63,5,101,0,0,63,64,5,118,0,0,64,165,5,97,0,0,65,165,5,44,0,0,66,
        67,5,102,0,0,67,68,5,105,0,0,68,69,5,109,0,0,69,70,5,95,0,0,70,71,
        5,97,0,0,71,72,5,108,0,0,72,73,5,103,0,0,73,74,5,111,0,0,74,75,5,
        114,0,0,75,76,5,105,0,0,76,77,5,116,0,0,77,78,5,109,0,0,78,165,5,
        111,0,0,79,165,2,40,41,0,80,81,5,60,0,0,81,165,5,45,0,0,82,165,7,
        0,0,0,83,84,5,46,0,0,84,165,5,46,0,0,85,86,5,114,0,0,86,87,5,101,
        0,0,87,88,5,97,0,0,88,165,5,108,0,0,89,165,7,1,0,0,90,91,5,60,0,
        0,91,165,5,62,0,0,92,93,5,62,0,0,93,165,5,61,0,0,94,95,5,60,0,0,
        95,165,5,61,0,0,96,165,5,61,0,0,97,98,5,115,0,0,98,165,5,101,0,0,
        99,100,5,101,0,0,100,101,5,110,0,0,101,102,5,116,0,0,102,103,5,97,
        0,0,103,165,5,111,0,0,104,105,5,102,0,0,105,106,5,105,0,0,106,107,
        5,109,0,0,107,108,5,95,0,0,108,109,5,115,0,0,109,165,5,101,0,0,110,
        111,5,115,0,0,111,112,5,101,0,0,112,113,5,110,0,0,113,114,5,97,0,
        0,114,165,5,111,0,0,115,116,5,101,0,0,116,117,5,110,0,0,117,118,
        5,113,0,0,118,119,5,117,0,0,119,120,5,97,0,0,120,121,5,110,0,0,121,
        122,5,116,0,0,122,165,5,111,0,0,123,124,5,102,0,0,124,125,5,97,0,
        0,125,126,5,99,0,0,126,165,5,97,0,0,127,128,5,102,0,0,128,129,5,
        105,0,0,129,130,5,109,0,0,130,131,5,95,0,0,131,132,5,101,0,0,132,
        133,5,110,0,0,133,134,5,113,0,0,134,135,5,117,0,0,135,136,5,97,0,
        0,136,137,5,110,0,0,137,138,5,116,0,0,138,165,5,111,0,0,139,165,
        7,2,0,0,140,141,5,114,0,0,141,142,5,101,0,0,142,143,5,103,0,0,143,
        144,5,105,0,0,144,145,5,115,0,0,145,146,5,116,0,0,146,147,5,114,
        0,0,147,165,5,111,0,0,148,149,5,102,0,0,149,150,5,105,0,0,150,151,
        5,109,0,0,151,152,5,95,0,0,152,153,5,114,0,0,153,154,5,101,0,0,154,
        155,5,103,0,0,155,156,5,105,0,0,156,157,5,115,0,0,157,158,5,116,
        0,0,158,159,5,114,0,0,159,165,5,111,0,0,160,165,5,101,0,0,161,162,
        5,110,0,0,162,163,5,97,0,0,163,165,5,111,0,0,164,23,1,0,0,0,164,
        32,1,0,0,0,164,39,1,0,0,0,164,40,1,0,0,0,164,47,1,0,0,0,164,54,1,
        0,0,0,164,58,1,0,0,0,164,65,1,0,0,0,164,66,1,0,0,0,164,79,1,0,0,
        0,164,80,1,0,0,0,164,82,1,0,0,0,164,83,1,0,0,0,164,85,1,0,0,0,164,
        89,1,0,0,0,164,90,1,0,0,0,164,92,1,0,0,0,164,94,1,0,0,0,164,96,1,
        0,0,0,164,97,1,0,0,0,164,99,1,0,0,0,164,104,1,0,0,0,164,110,1,0,
        0,0,164,115,1,0,0,0,164,123,1,0,0,0,164,127,1,0,0,0,164,139,1,0,
        0,0,164,140,1,0,0,0,164,148,1,0,0,0,164,160,1,0,0,0,164,161,1,0,
        0,0,165,2,1,0,0,0,166,168,7,3,0,0,167,166,1,0,0,0,167,168,1,0,0,
        0,168,170,1,0,0,0,169,171,2,48,57,0,170,169,1,0,0,0,171,172,1,0,
        0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,180,1,0,0,0,174,176,5,46,
        0,0,175,177,2,48,57,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,
        0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,174,1,0,0,0,180,181,1,
        0,0,0,181,4,1,0,0,0,182,184,7,3,0,0,183,182,1,0,0,0,183,184,1,0,
        0,0,184,186,1,0,0,0,185,187,2,48,57,0,186,185,1,0,0,0,187,188,1,
        0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,6,1,0,0,0,190,194,7,4,
        0,0,191,193,7,5,0,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,
        0,0,194,195,1,0,0,0,195,8,1,0,0,0,196,194,1,0,0,0,197,202,5,34,0,
        0,198,201,3,11,5,0,199,201,8,6,0,0,200,198,1,0,0,0,200,199,1,0,0,
        0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,
        0,204,202,1,0,0,0,205,206,5,34,0,0,206,10,1,0,0,0,207,208,5,92,0,
        0,208,209,5,34,0,0,209,12,1,0,0,0,210,214,5,123,0,0,211,213,8,7,
        0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,
        0,0,215,218,1,0,0,0,216,214,1,0,0,0,217,219,5,13,0,0,218,217,1,0,
        0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,5,125,0,0,221,222,1,
        0,0,0,222,223,6,6,0,0,223,14,1,0,0,0,224,225,7,8,0,0,225,226,1,0,
        0,0,226,227,6,7,0,0,227,16,1,0,0,0,228,232,5,34,0,0,229,231,8,9,
        0,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,
        0,0,233,236,1,0,0,0,234,232,1,0,0,0,235,237,5,13,0,0,236,235,1,0,
        0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,239,5,10,0,0,239,18,1,0,
        0,0,240,244,5,123,0,0,241,243,8,10,0,0,242,241,1,0,0,0,243,246,1,
        0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,248,1,0,0,0,246,244,1,
        0,0,0,247,249,5,13,0,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,
        0,0,0,250,251,5,10,0,0,251,20,1,0,0,0,252,253,9,0,0,0,253,22,1,0,
        0,0,17,0,164,167,172,178,180,183,188,194,200,202,214,218,232,236,
        244,248,1,6,0,0
    ]

class AnalisadorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SELF = 1
    NUM_REAL = 2
    NUM_INT = 3
    IDENT = 4
    CADEIA = 5
    COMENTARIO = 6
    WS = 7
    CADEIA_NAO_FECHADA = 8
    COMENTARIO_NAO_FECHADO = 9
    ERRO = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "SELF", "NUM_REAL", "NUM_INT", "IDENT", "CADEIA", "COMENTARIO", 
            "WS", "CADEIA_NAO_FECHADA", "COMENTARIO_NAO_FECHADO", "ERRO" ]

    ruleNames = [ "SELF", "NUM_REAL", "NUM_INT", "IDENT", "CADEIA", "ESC_SEQ", 
                  "COMENTARIO", "WS", "CADEIA_NAO_FECHADA", "COMENTARIO_NAO_FECHADO", 
                  "ERRO" ]

    grammarFileName = "AnalisadorLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


